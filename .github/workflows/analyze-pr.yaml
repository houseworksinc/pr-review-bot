name: Reusable PR Analysis with LLM

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        required: true

jobs:
  analyze_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitHub CLI
        run: |
          gh auth setup-git
          gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch PR Files and Diff
        id: pr_diff
        run: |
          # Get PR diff
          gh pr diff ${{ github.event.pull_request.number }} --repo ${{ github.repository }} | jq -Rs '.' > pr_diff.txt
          
          # Get list of changed files
          gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json files --jq '.files[].path' > changed_files.txt
          
          # Create context about the changes
          echo "Changed files:" > pr_context.txt
          cat changed_files.txt >> pr_context.txt
          echo -e "\nDiff content:" >> pr_context.txt
          cat pr_diff.txt >> pr_context.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze PR with OpenAI
        id: analyze_pr
        run: |
          PR_CONTEXT=$(cat pr_context.txt | jq -R -s '.')
          
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
          -d @- << EOF
          {
            "model": "gpt-4",
            "messages": [
              {
                "role": "system",
                "content": "You are an expert code reviewer. Analyze code changes thoroughly and provide specific, actionable feedback. Focus on code quality, security, and maintainability. Be concise but comprehensive. If reviewing infrastructure code, pay special attention to security configurations and best practices."
              },
              {
                "role": "user",
                "content": "Review this PR and structure your analysis as follows:\n\n## 📝 Summary\n- Core changes and purpose\n- Files affected\n- Impact assessment\n- Breaking changes (if any)\n\n## 🔍 Technical Analysis\n- Implementation quality\n- Logic issues/bugs\n- Error handling\n- Performance implications\n- Test coverage\n- Resource management (if applicable)\n\n## 🔒 Security Review\n- Security vulnerabilities\n- Access control issues\n- Data protection\n- Input validation\n- Sensitive data exposure\n- Configuration risks\n\n## 💡 Code Quality\n- Naming conventions\n- Code organization\n- Documentation completeness\n- Maintainability\n- Best practices adherence\n- Potential refactoring needs\n\n## 🎯 Recommendations\n- Specific improvements\n- Alternative approaches\n- Additional tests needed\n- Documentation updates\n\nKeep sections focused and actionable. Mark 'No issues identified' if a section has no concerns.\n\nHere are the changes:\n${PR_CONTEXT}"
              }
            ]
          }
          EOF
          )

          # Check for API errors
          if [ "$(echo "$RESPONSE" | jq -r '.error')" != "null" ]; then
            echo "Error from OpenAI API: $(echo "$RESPONSE" | jq -r '.error.message')"
            exit 1
          fi

          # Format the response
          echo "RESULT<<EOF" >> $GITHUB_ENV
          echo "# 🤖 Automated PR Review" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$(echo "$RESPONSE" | jq -r '.choices[0].message.content')" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "---" >> $GITHUB_ENV
          echo "_Generated by PR Review Bot_ | [📝 Report Issues](https://github.com/your-org/pr-review-bot/issues)" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Comment on PR
        uses: mshick/add-pr-comment@v2
        with:
          message: ${{ env.RESULT }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}