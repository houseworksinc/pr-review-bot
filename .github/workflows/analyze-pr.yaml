name: Reusable PR Analysis with LLM

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_call:
    inputs:
      ai_provider:
        type: string
        default: 'gemini'
        required: false
        description: 'AI provider to use (gemini, claude, openai, mistral)'
    secrets:
      GOOGLE_API_KEY:
        required: false
      ANTHROPIC_API_KEY:
        required: false
      OPENAI_API_KEY:
        required: false
      MISTRAL_API_KEY:
        required: false

jobs:
  analyze_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitHub CLI
        run: |
          gh auth setup-git
          gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch PR Files and Diff
        id: pr_diff
        run: |
          # Get PR diff with line numbers
          gh pr diff ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --patch > pr_diff.txt
          
          # Get list of changed files
          gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json files --jq '.files[].path' > changed_files.txt
          
          # Create context about the changes
          {
            echo "Changed files:"
            cat changed_files.txt
            echo -e "\nDiff content:"
            cat pr_diff.txt
          } > pr_context.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze PR
        id: analyze_pr
        run: |
          # Read the prompt template from an external file
          PROMPT_TEMPLATE=$(cat prompts/prompt_template.txt )
          
          # Combine template with PR context and escape for JSON
          FULL_PROMPT=$(printf "%s\n\nHere are the changes:\n%s" "$PROMPT_TEMPLATE" "$(cat pr_context.txt)")
          ESCAPED_PROMPT=$(echo "$FULL_PROMPT" | jq -Rs .)
          
          # Make the API call to Gemini
          cat > request.json << EOF
          {
            "contents": [{
              "parts":[{
                "text": ${ESCAPED_PROMPT}
              }]
            }],
            "generationConfig": {
              "temperature": 0.7,
              "topK": 40,
              "topP": 0.95,
              "maxOutputTokens": 2048
            }
          }
          EOF
          
          # Configure API endpoints and parameters based on provider
          case "${{ inputs.ai_provider }}" in
            "gemini")
              RESPONSE=$(curl -s -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${{ secrets.GOOGLE_API_KEY }}" \
                -H "Content-Type: application/json" \
                -d @request.json)
              ;;
            "claude")
              RESPONSE=$(curl -s -X POST "https://api.anthropic.com/v1/messages" \
                -H "x-api-key: ${{ secrets.ANTHROPIC_API_KEY }}" \
                -H "Content-Type: application/json" \
                -H "anthropic-version: 2023-06-01" \
                -d @request.json)
              ;;
            "openai")
              RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
                -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
                -H "Content-Type: application/json" \
                -d @request.json)
              ;;
            "mistral")
              RESPONSE=$(curl -s -X POST "https://api.mistral.ai/v1/chat/completions" \
                -H "Authorization: Bearer ${{ secrets.MISTRAL_API_KEY }}" \
                -H "Content-Type: application/json" \
                -d @request.json)
              ;;
          esac

          # Check for API errors
          if [ "$(echo "$RESPONSE" | jq -r '.error')" != "null" ]; then
            echo "Error from Gemini API: $(echo "$RESPONSE" | jq -r '.error.message')"
            exit 1
          fi

          # Extract the generated text from response
          REVIEW_CONTENT=$(echo "$RESPONSE" | jq -r '.candidates[0].content.parts[0].text')

          # Save the review content for debugging
          echo "$REVIEW_CONTENT" > review_content.txt

          # Parse the review content for line-specific comments
          echo "$REVIEW_CONTENT" | grep -E 'FILE:|LINE:|COMMENT:' > comments.txt

          # Format and save the response
          cat > result.txt << EOF
          RESULT<<EOFMARKER
          # 🤖 Automated PR Review

          $REVIEW_CONTENT

          ---
          _Generated by PR Review Bot_ | [📝 Report Issues](https://github.com/houseworksinc/pr-review-bot/issues)
          EOFMARKER
          EOF
          
          cat result.txt >> $GITHUB_ENV

      - name: Comment on PR
        uses: mshick/add-pr-comment@v2
        with:
          message: ${{ env.RESULT }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Parse Comments
        id: parse_comments
        run: |
          # Create a JSON array of comments
          echo "comments=[]" >> $GITHUB_OUTPUT
          comment_json="["
          while IFS= read -r line; do
            if [[ "$line" == FILE:* ]]; then
              FILE_PATH=$(echo "$line" | cut -d' ' -f2-)
            elif [[ "$line" == LINE:* ]]; then
              LINE_NUMBER=$(echo "$line" | cut -d' ' -f2-)
            elif [[ "$line" == COMMENT:* ]]; then
              COMMENT=$(echo "$line" | cut -d' ' -f2-)
              comment_json+="{\"body\":\"$COMMENT\",\"path\":\"$FILE_PATH\",\"line\":$LINE_NUMBER,\"side\":\"RIGHT\"},"
            fi
          done < comments.txt
          comment_json="${comment_json%,}]"
          echo "comments=$comment_json" >> $GITHUB_OUTPUT

      - name: Post Line Comments
        run: |
          comments='${{ steps.parse_comments.outputs.comments }}'
          for comment in $(echo "$comments" | jq -c '.[]'); do
            curl -s -X POST "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/comments" \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -d "$comment"
          done