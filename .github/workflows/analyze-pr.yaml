name: Reusable PR Analysis with LLM

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_call:
    secrets:
      OPENAI_API_KEY:
        required: true

jobs:
  analyze_pr:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitHub CLI
        run: |
          gh auth setup-git
          gh auth status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch PR Files and Diff
        id: pr_diff
        run: |
          # Get PR diff
          gh pr diff ${{ github.event.pull_request.number }} --repo ${{ github.repository }} > pr_diff.txt
          
          # Get list of changed files
          gh pr view ${{ github.event.pull_request.number }} --repo ${{ github.repository }} --json files --jq '.files[].path' > changed_files.txt
          
          # Create context about the changes
          {
            echo "Changed files:"
            cat changed_files.txt
            echo -e "\nDiff content:"
            cat pr_diff.txt
          } > pr_context.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Analyze PR with OpenAI
        id: analyze_pr
        run: |
          # Create the system message
          SYSTEM_MSG=$(jq -n --arg msg "You are an expert code reviewer. Analyze code changes thoroughly and provide specific, actionable feedback. Focus on code quality, security, and maintainability. Be concise but comprehensive. If reviewing infrastructure code, pay special attention to security configurations and best practices." '{role: "system", content: $msg}')
          
          # Create the user message template
          USER_MSG_TEMPLATE="Review this PR and structure your analysis as follows:

          ## üìù Summary
          - Core changes and purpose
          - Files affected
          - Impact assessment
          - Breaking changes (if any)

          ## üîç Technical Analysis
          - Implementation quality
          - Logic issues/bugs
          - Error handling
          - Performance implications
          - Test coverage
          - Resource management (if applicable)

          ## üîí Security Review
          - Security vulnerabilities
          - Access control issues
          - Data protection
          - Input validation
          - Sensitive data exposure
          - Configuration risks

          ## üí° Code Quality
          - Naming conventions
          - Code organization
          - Documentation completeness
          - Maintainability
          - Best practices adherence
          - Potential refactoring needs

          ## üéØ Recommendations
          - Specific improvements
          - Alternative approaches
          - Additional tests needed
          - Documentation updates

          Keep sections focused and actionable. Mark 'No issues identified' if a section has no concerns.

          Here are the changes:"
          
          # Combine template with PR context
          PR_CONTENT=$(cat pr_context.txt)
          USER_MSG="$USER_MSG_TEMPLATE

          $PR_CONTENT"
          
          # Create the full payload
          PAYLOAD=$(jq -n \
            --arg model "gpt-4" \
            --arg system_content "$SYSTEM_MSG" \
            --arg user_content "$USER_MSG" \
            '{
              model: $model,
              messages: [
                ($system_content | fromjson),
                {role: "user", content: $user_content}
              ]
            }')

          # Make the API call
          RESPONSE=$(curl -s -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.OPENAI_API_KEY }}" \
            -d "$PAYLOAD")

          # Check for API errors
          if [ "$(echo "$RESPONSE" | jq -r '.error')" != "null" ]; then
            echo "Error from OpenAI API: $(echo "$RESPONSE" | jq -r '.error.message')"
            exit 1
          fi

          # Format and save the response
          {
            echo "RESULT<<EOF"
            echo "# ü§ñ Automated PR Review"
            echo
            echo "$RESPONSE" | jq -r '.choices[0].message.content'
            echo
            echo "---"
            echo "_Generated by PR Review Bot_ | [üìù Report Issues](https://github.com/your-org/pr-review-bot/issues)"
            echo "EOF"
          } >> $GITHUB_ENV
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

      - name: Comment on PR
        uses: mshick/add-pr-comment@v2
        with:
          message: ${{ env.RESULT }}
          repo-token: ${{ secrets.GITHUB_TOKEN }}